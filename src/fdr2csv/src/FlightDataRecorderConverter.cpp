#include "FlightDataRecorderConverter.h"

using namespace std;

void FlightDataRecorderConverter::writeHeader(ofstream& out, const string& delimiter) {
  out << "time" << delimiter;
  out << "sim.time.dt" << delimiter;
  out << "sim.time.simulation_time" << delimiter;
  out << "sim.time.monotonic_time" << delimiter;
  out << "sim.data.nz_g" << delimiter;
  out << "sim.data.Theta_deg" << delimiter;
  out << "sim.data.Phi_deg" << delimiter;
  out << "sim.data.q_deg_s" << delimiter;
  out << "sim.data.r_deg_s" << delimiter;
  out << "sim.data.p_deg_s" << delimiter;
  out << "sim.data.qk_deg_s" << delimiter;
  out << "sim.data.rk_deg_s" << delimiter;
  out << "sim.data.pk_deg_s" << delimiter;
  out << "sim.data.qk_dot_deg_s2" << delimiter;
  out << "sim.data.rk_dot_deg_s2" << delimiter;
  out << "sim.data.pk_dot_deg_s2" << delimiter;
  out << "sim.data.psi_magnetic_deg" << delimiter;
  out << "sim.data.psi_true_deg" << delimiter;
  out << "sim.data.eta_deg" << delimiter;
  out << "sim.data.eta_trim_deg" << delimiter;
  out << "sim.data.xi_deg" << delimiter;
  out << "sim.data.zeta_deg" << delimiter;
  out << "sim.data.zeta_trim_deg" << delimiter;
  out << "sim.data.alpha_deg" << delimiter;
  out << "sim.data.beta_deg" << delimiter;
  out << "sim.data.beta_dot_deg_s" << delimiter;
  out << "sim.data.V_ias_kn" << delimiter;
  out << "sim.data.V_tas_kn" << delimiter;
  out << "sim.data.V_mach" << delimiter;
  out << "sim.data.H_ft" << delimiter;
  out << "sim.data.H_ind_ft" << delimiter;
  out << "sim.data.H_radio_ft" << delimiter;
  out << "sim.data.CG_percent_MAC" << delimiter;
  out << "sim.data.total_weight_kg" << delimiter;
  out << "sim.data.gear_strut_compression_0" << delimiter;
  out << "sim.data.gear_strut_compression_1" << delimiter;
  out << "sim.data.gear_strut_compression_2" << delimiter;
  out << "sim.data.flaps_handle_index" << delimiter;
  out << "sim.data.spoilers_left_pos" << delimiter;
  out << "sim.data.spoilers_right_pos" << delimiter;
  out << "sim.data.autopilot_master_on" << delimiter;
  out << "sim.data.slew_on" << delimiter;
  out << "sim.data.pause_on" << delimiter;
  out << "sim.data.simulation_rate" << delimiter;
  out << "sim.data.ice_structure_percent" << delimiter;
  out << "sim.data.linear_cl_alpha_per_deg" << delimiter;
  out << "sim.data.alpha_stall_deg" << delimiter;
  out << "sim.data.alpha_zero_lift_deg" << delimiter;
  out << "sim.data.ambient_density_kg_per_m3" << delimiter;
  out << "sim.data.ambient_pressure_mbar" << delimiter;
  out << "sim.data.ambient_temperature_celsius" << delimiter;
  out << "sim.data.ambient_wind_x_kn" << delimiter;
  out << "sim.data.ambient_wind_y_kn" << delimiter;
  out << "sim.data.ambient_wind_z_kn" << delimiter;
  out << "sim.data.ambient_wind_velocity_kn" << delimiter;
  out << "sim.data.ambient_wind_direction_deg" << delimiter;
  out << "sim.data.total_air_temperature_celsius" << delimiter;
  out << "sim.data.latitude_deg" << delimiter;
  out << "sim.data.longitude_deg" << delimiter;
  out << "sim.data_computed.on_ground" << delimiter;
  out << "sim.data_computed.tracking_mode_on" << delimiter;
  out << "sim.input.delta_eta_pos" << delimiter;
  out << "sim.input.delta_xi_pos" << delimiter;
  out << "sim.input.delta_zeta_pos" << delimiter;
  out << "pitch.data_computed.delta_eta_deg" << delimiter;
  out << "pitch.data_computed.in_flight" << delimiter;
  out << "pitch.data_computed.in_flare" << delimiter;
  out << "pitch.data_computed.in_flight_gain" << delimiter;
  out << "pitch.data_computed.nz_limit_up_g" << delimiter;
  out << "pitch.data_computed.nz_limit_lo_g" << delimiter;
  out << "pitch.data_computed.eta_trim_deg_should_freeze" << delimiter;
  out << "pitch.data_computed.eta_trim_deg_reset" << delimiter;
  out << "pitch.data_computed.eta_trim_deg_reset_deg" << delimiter;
  out << "pitch.data_computed.eta_trim_deg_should_write" << delimiter;
  out << "pitch.data_computed.eta_trim_deg_rate_limit_up_deg_s" << delimiter;
  out << "pitch.data_computed.eta_trim_deg_rate_limit_lo_deg_s" << delimiter;
  out << "pitch.data_computed.flare_Theta_deg" << delimiter;
  out << "pitch.data_computed.flare_Theta_c_deg" << delimiter;
  out << "pitch.data_computed.flare_Theta_c_rate_deg_s" << delimiter;
  out << "pitch.law_normal.nz_c_g" << delimiter;
  out << "pitch.law_normal.Cstar_g" << delimiter;
  out << "pitch.law_normal.eta_dot_deg_s" << delimiter;
  out << "pitch.vote.eta_dot_deg_s" << delimiter;
  out << "pitch.integrated.eta_deg" << delimiter;
  out << "pitch.output.eta_deg" << delimiter;
  out << "pitch.output.eta_trim_deg" << delimiter;
  out << "roll.data_computed.delta_xi_deg" << delimiter;
  out << "roll.data_computed.delta_zeta_deg" << delimiter;
  out << "roll.data_computed.in_flight" << delimiter;
  out << "roll.data_computed.in_flight_gain" << delimiter;
  out << "roll.law_normal.pk_c_deg_s" << delimiter;
  out << "roll.law_normal.Phi_c_deg" << delimiter;
  out << "roll.law_normal.xi_deg" << delimiter;
  out << "roll.law_normal.zeta_deg" << delimiter;
  out << "roll.output.xi_deg" << delimiter;
  out << "roll.output.zeta_deg" << delimiter;
  out << "output.eta_pos" << delimiter;
  out << "output.eta_trim_deg" << delimiter;
  out << "output.eta_trim_deg_should_write" << delimiter;
  out << "output.xi_pos" << delimiter;
  out << "output.zeta_pos" << delimiter;
  out << "output.zeta_trim_pos";
  out << endl;
}

void FlightDataRecorderConverter::writeStruct(ofstream& out, const string& delimiter, const fbw_output& data) {
  out << data.sim.time.monotonic_time << delimiter;
  out << data.sim.time.dt << delimiter;
  out << data.sim.time.simulation_time << delimiter;
  out << data.sim.time.monotonic_time << delimiter;
  out << data.sim.data.nz_g << delimiter;
  out << data.sim.data.Theta_deg << delimiter;
  out << data.sim.data.Phi_deg << delimiter;
  out << data.sim.data.q_deg_s << delimiter;
  out << data.sim.data.r_deg_s << delimiter;
  out << data.sim.data.p_deg_s << delimiter;
  out << data.sim.data.qk_deg_s << delimiter;
  out << data.sim.data.rk_deg_s << delimiter;
  out << data.sim.data.pk_deg_s << delimiter;
  out << data.sim.data.qk_dot_deg_s2 << delimiter;
  out << data.sim.data.rk_dot_deg_s2 << delimiter;
  out << data.sim.data.pk_dot_deg_s2 << delimiter;
  out << data.sim.data.psi_magnetic_deg << delimiter;
  out << data.sim.data.psi_true_deg << delimiter;
  out << data.sim.data.eta_deg << delimiter;
  out << data.sim.data.eta_trim_deg << delimiter;
  out << data.sim.data.xi_deg << delimiter;
  out << data.sim.data.zeta_deg << delimiter;
  out << data.sim.data.zeta_trim_deg << delimiter;
  out << data.sim.data.alpha_deg << delimiter;
  out << data.sim.data.beta_deg << delimiter;
  out << data.sim.data.beta_dot_deg_s << delimiter;
  out << data.sim.data.V_ias_kn << delimiter;
  out << data.sim.data.V_tas_kn << delimiter;
  out << data.sim.data.V_mach << delimiter;
  out << data.sim.data.H_ft << delimiter;
  out << data.sim.data.H_ind_ft << delimiter;
  out << data.sim.data.H_radio_ft << delimiter;
  out << data.sim.data.CG_percent_MAC << delimiter;
  out << data.sim.data.total_weight_kg << delimiter;
  out << data.sim.data.gear_strut_compression_0 << delimiter;
  out << data.sim.data.gear_strut_compression_1 << delimiter;
  out << data.sim.data.gear_strut_compression_2 << delimiter;
  out << data.sim.data.flaps_handle_index << delimiter;
  out << data.sim.data.spoilers_left_pos << delimiter;
  out << data.sim.data.spoilers_right_pos << delimiter;
  out << data.sim.data.autopilot_master_on << delimiter;
  out << data.sim.data.slew_on << delimiter;
  out << data.sim.data.pause_on << delimiter;
  out << data.sim.data.simulation_rate << delimiter;
  out << data.sim.data.ice_structure_percent << delimiter;
  out << data.sim.data.linear_cl_alpha_per_deg << delimiter;
  out << data.sim.data.alpha_stall_deg << delimiter;
  out << data.sim.data.alpha_zero_lift_deg << delimiter;
  out << data.sim.data.ambient_density_kg_per_m3 << delimiter;
  out << data.sim.data.ambient_pressure_mbar << delimiter;
  out << data.sim.data.ambient_temperature_celsius << delimiter;
  out << data.sim.data.ambient_wind_x_kn << delimiter;
  out << data.sim.data.ambient_wind_y_kn << delimiter;
  out << data.sim.data.ambient_wind_z_kn << delimiter;
  out << data.sim.data.ambient_wind_velocity_kn << delimiter;
  out << data.sim.data.ambient_wind_direction_deg << delimiter;
  out << data.sim.data.total_air_temperature_celsius << delimiter;
  out << data.sim.data.latitude_deg << delimiter;
  out << data.sim.data.longitude_deg << delimiter;
  out << data.sim.data_computed.on_ground << delimiter;
  out << data.sim.data_computed.tracking_mode_on << delimiter;
  out << data.sim.input.delta_eta_pos << delimiter;
  out << data.sim.input.delta_xi_pos << delimiter;
  out << data.sim.input.delta_zeta_pos << delimiter;
  out << data.pitch.data_computed.delta_eta_deg << delimiter;
  out << data.pitch.data_computed.in_flight << delimiter;
  out << data.pitch.data_computed.in_flare << delimiter;
  out << data.pitch.data_computed.in_flight_gain << delimiter;
  out << data.pitch.data_computed.nz_limit_up_g << delimiter;
  out << data.pitch.data_computed.nz_limit_lo_g << delimiter;
  out << static_cast<unsigned int>(data.pitch.data_computed.eta_trim_deg_should_freeze) << delimiter;
  out << static_cast<unsigned int>(data.pitch.data_computed.eta_trim_deg_reset) << delimiter;
  out << data.pitch.data_computed.eta_trim_deg_reset_deg << delimiter;
  out << static_cast<unsigned int>(data.pitch.data_computed.eta_trim_deg_should_write) << delimiter;
  out << data.pitch.data_computed.eta_trim_deg_rate_limit_up_deg_s << delimiter;
  out << data.pitch.data_computed.eta_trim_deg_rate_limit_lo_deg_s << delimiter;
  out << data.pitch.data_computed.flare_Theta_deg << delimiter;
  out << data.pitch.data_computed.flare_Theta_c_deg << delimiter;
  out << data.pitch.data_computed.flare_Theta_c_rate_deg_s << delimiter;
  out << data.pitch.law_normal.nz_c_g << delimiter;
  out << data.pitch.law_normal.Cstar_g << delimiter;
  out << data.pitch.law_normal.eta_dot_deg_s << delimiter;
  out << data.pitch.vote.eta_dot_deg_s << delimiter;
  out << data.pitch.integrated.eta_deg << delimiter;
  out << data.pitch.output.eta_deg << delimiter;
  out << data.pitch.output.eta_trim_deg << delimiter;
  out << data.roll.data_computed.delta_xi_deg << delimiter;
  out << data.roll.data_computed.delta_zeta_deg << delimiter;
  out << data.roll.data_computed.in_flight << delimiter;
  out << data.roll.data_computed.in_flight_gain << delimiter;
  out << data.roll.law_normal.pk_c_deg_s << delimiter;
  out << data.roll.law_normal.Phi_c_deg << delimiter;
  out << data.roll.law_normal.xi_deg << delimiter;
  out << data.roll.law_normal.zeta_deg << delimiter;
  out << data.roll.output.xi_deg << delimiter;
  out << data.roll.output.zeta_deg << delimiter;
  out << data.output.eta_pos << delimiter;
  out << data.output.eta_trim_deg << delimiter;
  out << static_cast<unsigned int>(data.output.eta_trim_deg_should_write) << delimiter;
  out << data.output.xi_pos << delimiter;
  out << data.output.zeta_pos << delimiter;
  out << data.output.zeta_trim_pos;
  out << endl;
}
